package main

/*
Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Example 2:
Input: nums = [0,0,0], target = 1
Output: 0

Constraints:
3 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
-10^4 <= target <= 10^4
*/

import (
	"fmt"
	"math"
)

func main() {
	tcs := []struct {
		nums     []int
		target   int
		expected int
	}{
		{[]int{-1, 2, 1, -4}, 1, 2},
		// {[]int{-1, 2, 1, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, 3, 10, 22, 30, 11, 13, 15, -100, 10, 22, 30, 11, 13, 15, 3, 10}, 1, 2},
		{[]int{0, 0, 0}, 1, 0},
	}

	for _, tc := range tcs {
		fmt.Printf("Amount of numbers %d\n", len(tc.nums))
		r := threeSumClosest(tc.nums, tc.target)
		if r != tc.expected {
			fmt.Println("Wrong")
		} else {
			fmt.Println("Correct")
		}
	}
}

func threeSumClosest(nums []int, target int) int {
	var offset = 100
	var result = 0

	for ni, num := range nums {
		for i := 0; i < len(nums); i++ {
			if i != ni {
				for i2 := 0; i2 < len(nums); i2++ {
					if i2 != ni && i != ni && i != i2 {
						v := num + nums[i] + nums[i2]
						r := int(math.Abs(float64(v - target)))
						if r < offset {
							offset = r
							result = v
						}
					}
				}
			}
		}
	}

	return result
}
